name: build

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

jobs:
  build:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        architecture: [linux-amd64, linux-arm64, linux-arm-v7]
    outputs:
      version: ${{ steps.prep.outputs.version }}
      branch: ${{ steps.prep.outputs.branch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check if architecture exists
        id: arch_check
        run: |
          (test -f Dockerfile.${{ matrix.architecture }} && echo "check=passed" >> $GITHUB_OUTPUT) || echo "check=failed" >> $GITHUB_OUTPUT
      
      - name: Set up QEMU
        if: "contains(steps.arch_check.outputs.check, 'passed')"
        uses: docker/setup-qemu-action@v2.1.0

      - name: Set up Docker Buildx
        if: "contains(steps.arch_check.outputs.check, 'passed')"
        uses: docker/setup-buildx-action@v2.4.1
        with:
          install: true
          version: latest
          driver-opts: image=moby/buildkit:master

      - name: Login to docker.io
        if: "contains(steps.arch_check.outputs.check, 'passed')"
        uses: docker/login-action@v2.1.0
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to ghcr.io
        if: "contains(steps.arch_check.outputs.check, 'passed')"
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Prepare
        if: "contains(steps.arch_check.outputs.check, 'passed')"
        id: prep
        run: |
          {
            ARCHITECTURE=${{ matrix.architecture }}
            echo "created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            echo "title=${GITHUB_REPOSITORY}:${GITHUB_REF//refs\/heads\//}"
            echo "revision=${GITHUB_SHA}"
            echo "source=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/tree/${GITHUB_REF//refs\/heads\//}"
            echo "vendor=${{ github.repository_owner }}"
            echo "url=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/blob/master/README.md"
            echo "platform=${ARCHITECTURE//-/\/}"
            echo "cache=${GITHUB_REPOSITORY}:${GITHUB_REF//refs\/heads\//}-cache-${{ matrix.architecture }}"
            echo "tag=${GITHUB_REPOSITORY}:${GITHUB_REF//refs\/heads\//}-${GITHUB_SHA:0:7}-${GITHUB_RUN_NUMBER}-${{ matrix.architecture }}"
          } >> $GITHUB_OUTPUT

          BRANCH="${GITHUB_REF//refs\/heads\//}"
          if [[ -n ${BRANCH} ]]; then
            echo "branch=-${BRANCH}" >> $GITHUB_OUTPUT
          fi
      
      - name: Build and push - Attempt 1
        continue-on-error: true
        if: "contains(steps.arch_check.outputs.check, 'passed')"
        id: build_attempt1
        uses: docker/build-push-action@v4.0.0
        with:
          push: true
          platforms: ${{ steps.prep.outputs.platform }}
          file: ./${{ matrix.architecture }}.Dockerfile
          cache-from: docker.io/${{ steps.prep.outputs.cache }}
          cache-to: docker.io/${{ steps.prep.outputs.cache }}
          tags: |
            docker.io/${{ steps.prep.outputs.tag }}
            ghcr.io/${{ steps.prep.outputs.tag }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.title=${{ steps.prep.outputs.title }}
            org.opencontainers.image.revision=${{ steps.prep.outputs.revision }}
            org.opencontainers.image.source=${{ steps.prep.outputs.source }}
            org.opencontainers.image.vendor=${{ steps.prep.outputs.vendor }}
            org.opencontainers.image.url=${{ steps.prep.outputs.url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
          build-args: |
            GITHUB_TOKEN=${{ secrets.GHCR_TOKEN }}
            BUILD_ARCHITECTURE=${{ matrix.architecture }}
            ${{ steps.prep.outputs.build-args }}
      
      - name: Sleep
        if: (steps.build_attempt1.outcome == 'failure')
        run: |
          sleep 30
      
      - name: Build and push - Attempt 2
        if: (steps.build_attempt1.outcome == 'failure')
        uses: docker/build-push-action@v4.0.0
        with:
          push: true
          platforms: ${{ steps.prep.outputs.platform }}
          file: ./${{ matrix.architecture }}.Dockerfile
          cache-from: docker.io/${{ steps.prep.outputs.cache }}
          cache-to: docker.io/${{ steps.prep.outputs.cache }}
          tags: |
            docker.io/${{ steps.prep.outputs.tag }}
            ghcr.io/${{ steps.prep.outputs.tag }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.title=${{ steps.prep.outputs.title }}
            org.opencontainers.image.revision=${{ steps.prep.outputs.revision }}
            org.opencontainers.image.source=${{ steps.prep.outputs.source }}
            org.opencontainers.image.vendor=${{ steps.prep.outputs.vendor }}
            org.opencontainers.image.url=${{ steps.prep.outputs.url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
          build-args: |
            GITHUB_TOKEN=${{ secrets.GHCR_TOKEN }}
            BUILD_ARCHITECTURE=${{ matrix.architecture }}
            ${{ steps.prep.outputs.build-args }}

  publish:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        registry: [docker.io, ghcr.io]
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to docker.io
        if: matrix.registry == 'docker.io'
        uses: docker/login-action@v2.1.0
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to ghcr.io
        if: matrix.registry == 'ghcr.io'
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Create manifests - Attempt 1
        continue-on-error: true
        id: manifest_attempt1
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        run: |
          IMAGE=${{ matrix.registry }}/$(echo ${GITHUB_REPOSITORY} | tr '[:upper:]' '[:lower:]' | sed s/docker-//)
          TAG=${{ needs.build.outputs.branch }}
          SOURCE=${IMAGE}:${TAG}-${GITHUB_SHA:0:7}-${GITHUB_RUN_NUMBER}
          BRANCH=${{ needs.build.outputs.branch }}
          [[ -f Dockerfile.amd64 ]]  && AMD64=${SOURCE}-linux-amd64
          [[ -f Dockerfile.arm64 ]]  && ARM64=${SOURCE}-linux-arm64
          [[ -f Dockerfile.arm-v7 ]] && ARMV7=${SOURCE}-linux-arm-v7
          docker manifest create ${IMAGE}:${TAG} ${AMD64} ${ARM64} ${ARMV7}
          docker manifest push   ${IMAGE}:${TAG}
          docker manifest create ${IMAGE}:${TAG}-${GITHUB_SHA:0:7} ${AMD64} ${ARM64} ${ARMV7}
          docker manifest push   ${IMAGE}:${TAG}-${GITHUB_SHA:0:7}
          if [[ ${BRANCH} == master ]]; then
            docker manifest create ${IMAGE}:latest ${AMD64} ${ARM64} ${ARMV7}
            docker manifest push   ${IMAGE}:latest
          fi
      
      - name: Sleep
        if: (steps.manifest_attempt1.outcome == 'failure')
        run: |
          sleep 30
      
      - name: Create manifests - Attempt 2
        if: (steps.manifest_attempt1.outcome == 'failure')
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        run: |
          IMAGE=${{ matrix.registry }}/$(echo ${GITHUB_REPOSITORY} | tr '[:upper:]' '[:lower:]' | sed s/docker-//)
          TAG=${{ needs.build.outputs.branch }}
          SOURCE=${IMAGE}:${TAG}-${GITHUB_SHA:0:7}-${GITHUB_RUN_NUMBER}
          BRANCH=${{ needs.build.outputs.branch }}
          [[ -f Dockerfile.amd64 ]]  && AMD64=${SOURCE}-linux-amd64
          [[ -f Dockerfile.arm64 ]]  && ARM64=${SOURCE}-linux-arm64
          [[ -f Dockerfile.arm-v7 ]] && ARMV7=${SOURCE}-linux-arm-v7
          docker manifest rm     ${IMAGE}:${TAG} || true
          docker manifest create ${IMAGE}:${TAG} ${AMD64} ${ARM64} ${ARMV7}
          docker manifest push   ${IMAGE}:${TAG}
          docker manifest rm     ${IMAGE}:${TAG}-${GITHUB_SHA:0:7} || true
          docker manifest create ${IMAGE}:${TAG}-${GITHUB_SHA:0:7} ${AMD64} ${ARM64} ${ARMV7}
          docker manifest push   ${IMAGE}:${TAG}-${GITHUB_SHA:0:7}
          if [[ ${BRANCH} == master ]]; then
            docker manifest rm     ${IMAGE}:latest || true
            docker manifest create ${IMAGE}:latest ${AMD64} ${ARM64} ${ARMV7}
            docker manifest push   ${IMAGE}:latest
          fi